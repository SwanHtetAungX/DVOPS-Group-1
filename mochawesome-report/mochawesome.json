{
  "stats": {
    "suites": 6,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-02T05:09:48.237Z",
    "end": "2024-02-02T05:09:58.458Z",
    "duration": 10221,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c97fc69c-78a2-4721-90b7-f58421ef873c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
          "title": "Testing expense related features",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\expenseTests.test.js",
          "file": "\\tests\\expenseTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"before each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(expensesFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "8b3f6700-7832-472b-88be-46d689257270",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"after each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(expensesFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "5c3d08a6-eb9f-4c44-984a-e49cfb1c58e5",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should add a new expense successfully",
              "fullTitle": "Testing expense related features Should add a new expense successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response data is as expected\n  json: function (data) {\n    expect(data).to.have.lengthOf(orgContent.length + 1);\n    expect(data[orgContent.length].name).to.equal(req.body.name);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "e5af2e6f-c5df-4eae-8bb6-28841b427efb",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to add an expense due to incomplete input",
              "fullTitle": "Testing expense related features Should not be able to add an expense due to incomplete input",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    date: \"2023-10-30\"\n  },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is present\n  json: function (data) {\n    expect(data.message).to.not.equal(undefined);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "667fedf5-80b9-4d75-bdf7-2613b3394ba8",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should edit an expense successfully",
              "fullTitle": "Testing expense related features Should edit an expense successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1706728421915975 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense modified successfully!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "dd50dab2-3b56-40a8-826e-ea2f987568a2",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to edit an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to edit an expense due to invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to modify!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "46930505-799a-4707-b244-9d49b54fd4d8",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete an expense successfully",
              "fullTitle": "Testing expense related features Should delete an expense successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1706728421915975 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense deleted successfully!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "26a13324-79c8-4fa1-85ee-0834a948a499",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to delete an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to delete an expense due to invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to delete!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "ced114a8-c28c-43d1-8044-6b07ccf6a15d",
              "parentUUID": "184d5b78-5f3d-4f22-a0c9-8bdd7020b8f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5af2e6f-c5df-4eae-8bb6-28841b427efb",
            "667fedf5-80b9-4d75-bdf7-2613b3394ba8",
            "dd50dab2-3b56-40a8-826e-ea2f987568a2",
            "46930505-799a-4707-b244-9d49b54fd4d8",
            "26a13324-79c8-4fa1-85ee-0834a948a499",
            "ced114a8-c28c-43d1-8044-6b07ccf6a15d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4440ef33-04f9-438a-8da6-74e0fa149a47",
          "title": "Testing Income related features",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\incomeTests.test.js",
          "file": "\\tests\\incomeTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"before each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(incomeFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "ae24f69e-47d2-4319-8daa-4f8c189cf7aa",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"after each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(incomeFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "ab9b3004-977f-4567-9fce-1503bf32f41c",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to add a new income successfully",
              "fullTitle": "Testing Income related features Able to add a new income successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        amount: 6969,\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].name).to.equal(req.body.name);\n    }\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "8b6ea1cb-1b8b-4e4a-88ec-38f9ac390b89",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to add a new income due to incomplete input",
              "fullTitle": "Testing Income related features Unable to add a new income due to incomplete input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected  \n    json: function (data) {\n        expect(data.message).to.not.equal(undefined);\n    },\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "d4340ff8-cf2e-4224-afaf-079fa7924159",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit an income successfully",
              "fullTitle": "Testing Income related features Able to edit an income successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income modified successfully!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "be6cf972-3b72-48ed-a743-f6f241572d44",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to edit an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to edit an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 6969 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to modify!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "476dc4f2-df06-4e8b-a404-02bd62c64e1a",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete an income successfully",
              "fullTitle": "Testing Income related features Able to delete an income successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income deleted successfully!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "24cb17c7-04aa-4ace-8817-fcb5ab1e4e99",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to delete an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to delete an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 690696 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to delete!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "b68d80c5-4765-499a-9fc5-63fd3984584b",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to view all transactions successfully",
              "fullTitle": "Testing Income related features Able to view all transactions successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(200);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.be.an('array');\n    }\n};\n// Call the \"viewTransactions\" function with the mocked request and response objects to test\nawait viewTransactions(req, res);",
              "err": {},
              "uuid": "a0c35f62-224a-41ea-80fe-a0799a303626",
              "parentUUID": "4440ef33-04f9-438a-8da6-74e0fa149a47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b6ea1cb-1b8b-4e4a-88ec-38f9ac390b89",
            "d4340ff8-cf2e-4224-afaf-079fa7924159",
            "be6cf972-3b72-48ed-a743-f6f241572d44",
            "476dc4f2-df06-4e8b-a404-02bd62c64e1a",
            "24cb17c7-04aa-4ace-8817-fcb5ab1e4e99",
            "b68d80c5-4765-499a-9fc5-63fd3984584b",
            "a0c35f62-224a-41ea-80fe-a0799a303626"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "12a662a6-471f-4378-8892-2fa40522abb2",
          "title": "Testing API Routes",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\routesTests.test.js",
          "file": "\\tests\\routesTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"before each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "a32ffdab-b912-4f91-81f5-e9de4fe8b1a1",
              "parentUUID": "12a662a6-471f-4378-8892-2fa40522abb2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"after each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "b7e13238-4d14-42e9-add1-044e151f1224",
              "parentUUID": "12a662a6-471f-4378-8892-2fa40522abb2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing API Routes Should register a new user successfully",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/register\")\n  .send({ email: \"james@gmail.com\", password: \"testpassword\" })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "d3a0b015-6a89-4f3a-acb3-7a3a7e8361a6",
              "parentUUID": "12a662a6-471f-4378-8892-2fa40522abb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should log in an existing user successfully",
              "fullTitle": "Testing API Routes Should log in an existing user successfully",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/login\")\n  .send({ email: orgContent[0].email, password: orgContent[0].password })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body.message).to.equal(\"Login successful!\");\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "68331def-2a78-4055-ad66-1485c0752330",
              "parentUUID": "12a662a6-471f-4378-8892-2fa40522abb2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3a0b015-6a89-4f3a-acb3-7a3a7e8361a6",
            "68331def-2a78-4055-ad66-1485c0752330"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
          "title": "Testing Sauce Demo Login Page",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\sauceDemo.test.js",
          "file": "\\tests\\sauceDemo.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Sauce Demo Login Page\"",
              "fullTitle": "Testing Sauce Demo Login Page \"before each\" hook in \"Testing Sauce Demo Login Page\"",
              "timedOut": false,
              "duration": 1474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initialize a Chrome WebDriver instance\ndriver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "60d22a2a-9005-4ec2-931b-5d9ef7b8cc90",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Sauce Demo Login Page\"",
              "fullTitle": "Testing Sauce Demo Login Page \"after each\" hook in \"Testing Sauce Demo Login Page\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Close the browser after each test\nawait driver.quit();",
              "err": {},
              "uuid": "24d27b63-76a0-4e04-a793-7a16518b7bb1",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should show title: Swag Labs",
              "fullTitle": "Testing Sauce Demo Login Page Should show title: Swag Labs",
              "timedOut": false,
              "duration": 250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/'); // Navigate Sauce Demo\nconst title = await driver.getTitle(); // Get the title of the web page\nexpect(title).to.equal(\"Swag Labs\"); // Assert that title matches \"Swag Labs\"",
              "err": {},
              "uuid": "5daf0b17-8b82-42c5-bb34-69ce9d7461e2",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show error - invalid credentials",
              "fullTitle": "Testing Sauce Demo Login Page Should show error - invalid credentials",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/');\n// Locate and interact with the username field\nconst username = await driver.findElement(By.id('user-name'));\nawait username.click();\nawait username.sendKeys('john');\n//Locate and interact with the password field\nconst password = await driver.findElement(By.id('password'));\nawait password.click();\nawait password.sendKeys('123456');\n// Locate and interact with the login button\nconst loginButton = await driver.findElement(By.id('login-button'));\nawait loginButton.click();\n// Locate the error message element and retrieve its inner HTML\nconst errorElement = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"));\nconst errorMsg = await errorElement.getAttribute(\"innerHTML\");\n// Assert that the error message contains the expected text\nexpect(errorMsg).to.contain(\"Epic sadface: Username and password do not match any user in this service\");",
              "err": {},
              "uuid": "4335189a-9d4f-4f27-954d-e07dad588e36",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show error - Username required",
              "fullTitle": "Testing Sauce Demo Login Page Should show error - Username required",
              "timedOut": false,
              "duration": 384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/');\n//Locate and interact with the password field\nconst password = await driver.findElement(By.id('password'));\nawait password.click();\nawait password.sendKeys('123456');\n// Locate and interact with the login button\nconst loginButton = await driver.findElement(By.id('login-button'));\nawait loginButton.click();\n// Locate the error message element and retrieve its inner HTML\nconst errorElement = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"));\nconst errorMsg = await errorElement.getAttribute(\"innerHTML\");\n// Assert that the error message contains the expected text\nexpect(errorMsg).to.contain(\"Epic sadface: Username is required\");",
              "err": {},
              "uuid": "c42c8db4-3d0f-4c6e-88c3-fea33ef07e5c",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show error - Password required",
              "fullTitle": "Testing Sauce Demo Login Page Should show error - Password required",
              "timedOut": false,
              "duration": 382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/');\n// Locate and interact with the username field\nconst username = await driver.findElement(By.id('user-name'));\nawait username.click();\nawait username.sendKeys('john');\n// Locate and interact with the login button\nconst loginButton = await driver.findElement(By.id('login-button'));\nawait loginButton.click();\n// Locate the error message element and retrieve its inner HTML\nconst errorElement = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"));\nconst errorMsg = await errorElement.getAttribute(\"innerHTML\");\n// Assert that the error message contains the expected text\nexpect(errorMsg).to.contain(\"Epic sadface: Password is required\");",
              "err": {},
              "uuid": "e79d5564-9785-46cf-b866-69c977a9a609",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should bring user to inventory page",
              "fullTitle": "Testing Sauce Demo Login Page Should bring user to inventory page",
              "timedOut": false,
              "duration": 631,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/');\n// Locate and interact with the username field\nconst username = await driver.findElement(By.id('user-name'));\nawait username.click();\nawait username.sendKeys('standard_user');\n//Locate and interact with the password field\nconst password = await driver.findElement(By.id('password'));\nawait password.click();\nawait password.sendKeys('secret_sauce');\n// Locate and interact with the login button\nconst loginButton = await driver.findElement(By.id('login-button'));\nawait loginButton.click();\n// Assert that the URL matches the expected URL\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl).to.equal('https://www.saucedemo.com/inventory.html');\n// Locate and interact with the Add to Cart button\nconst addToCart = await driver.findElement(By.xpath(\"//button[text()='Add to cart']\"));\nawait addToCart.click();\n// Assert that value in badge is 1\nconst badge = await driver.findElement(By.xpath(\"//span[@class='shopping_cart_badge']\"));\nexpect(await badge.getText()).to.equal('1');",
              "err": {},
              "uuid": "a31ebf5b-626d-4de7-a736-f4adfdc20324",
              "parentUUID": "cf6b6edb-3846-4c92-9666-a4848d606f7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5daf0b17-8b82-42c5-bb34-69ce9d7461e2",
            "4335189a-9d4f-4f27-954d-e07dad588e36",
            "c42c8db4-3d0f-4c6e-88c3-fea33ef07e5c",
            "e79d5564-9785-46cf-b866-69c977a9a609",
            "a31ebf5b-626d-4de7-a736-f4adfdc20324"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2165,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "81039565-3673-4097-a191-5df0230f0319",
          "title": "Testing Register Function",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"before each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "ba225526-6123-41cc-a8b6-84a08cec64c2",
              "parentUUID": "81039565-3673-4097-a191-5df0230f0319",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"after each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "0e79f135-0b79-4f4a-bb0d-4847483a59ee",
              "parentUUID": "81039565-3673-4097-a191-5df0230f0319",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing Register Function Should register a new user successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with user registration data\nconst req = {\n    body: {\n        email: \"mary@gmail.com\",\n        password: \"123456\",\n    },\n};\n// Mock response object with assertions for successful registration\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].email).to.equal(req.body.email);\n        expect(data[orgContent.length].password).to.equal(req.body.password);\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "61708fb4-f5d4-42c9-b984-19b053f8196d",
              "parentUUID": "81039565-3673-4097-a191-5df0230f0319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to email",
              "fullTitle": "Testing Register Function Should show validation error due to email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid email format\nconst req = {\n    body: {\n        email: \"simon#gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "5371d68e-16a6-4607-862e-28020ae5e34e",
              "parentUUID": "81039565-3673-4097-a191-5df0230f0319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to password length",
              "fullTitle": "Testing Register Function Should show validation error due to password length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with a short password\nconst req = {\n    body: {\n        email: \"simon@gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "bfd84f46-31fe-49b4-a946-b14f6559e75c",
              "parentUUID": "81039565-3673-4097-a191-5df0230f0319",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61708fb4-f5d4-42c9-b984-19b053f8196d",
            "5371d68e-16a6-4607-862e-28020ae5e34e",
            "bfd84f46-31fe-49b4-a946-b14f6559e75c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "91455223-b78c-4f65-9dd0-9815e495658b",
          "title": "Testing Login Function",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Login Function\"",
              "fullTitle": "Testing Login Function \"before each\" hook in \"Testing Login Function\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "42a3945e-d3bf-4bd0-9fac-20c427c51eab",
              "parentUUID": "91455223-b78c-4f65-9dd0-9815e495658b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should login successfully",
              "fullTitle": "Testing Login Function Should login successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with valid login credentials\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: orgContent[0].password,\n    },\n};\n// Mock response object with assertions for successful login\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Login successful!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "0d2273b9-6033-41a2-b58d-f840e7303ed4",
              "parentUUID": "91455223-b78c-4f65-9dd0-9815e495658b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show invalid credentials",
              "fullTitle": "Testing Login Function Should show invalid credentials",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid password\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: \"abcdefg\",\n    },\n};\n// Mock response object with assertions for invalid credentials\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Invalid credentials!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "32275998-feef-4fec-b982-5b0e4ce1006d",
              "parentUUID": "91455223-b78c-4f65-9dd0-9815e495658b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d2273b9-6033-41a2-b58d-f840e7303ed4",
            "32275998-feef-4fec-b982-5b0e4ce1006d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}