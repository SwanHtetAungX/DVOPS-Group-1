{
  "stats": {
    "suites": 5,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-04T05:45:37.452Z",
    "end": "2024-02-04T05:45:37.551Z",
    "duration": 99,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "78e9c6f9-abf9-4796-9027-fd148f956d88",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
          "title": "Testing expense related features",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\expenseTests.test.js",
          "file": "\\tests\\expenseTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"before each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(expensesFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "a5dab76b-adcc-4864-b4be-213521298014",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"after each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(expensesFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "c901da4f-4bb8-4edc-b4ee-f90969748994",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should add a new expense successfully",
              "fullTitle": "Testing expense related features Should add a new expense successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response data is as expected\n  json: function (data) {\n    expect(data).to.have.lengthOf(orgContent.length + 1);\n    expect(data[orgContent.length].name).to.equal(req.body.name);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "1d78c52b-ebfd-4a3a-ae2f-5266138c340d",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to add an expense due to incomplete input",
              "fullTitle": "Testing expense related features Should not be able to add an expense due to incomplete input",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    date: \"2023-10-30\"\n  },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is present\n  json: function (data) {\n    expect(data.message).to.not.equal(undefined);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "d0bcaf72-564e-4512-981e-10ab0de5892d",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should edit an expense successfully",
              "fullTitle": "Testing expense related features Should edit an expense successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1706728421915975 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense modified successfully!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "5b87e5bd-ec10-4f9f-8a1f-5427a4d8eeb0",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to edit an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to edit an expense due to invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to modify!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "7820837a-43a1-4664-97ec-198dae6dc908",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete an expense successfully",
              "fullTitle": "Testing expense related features Should delete an expense successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1706728421915975 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense deleted successfully!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "3c7999f5-772e-4f02-8059-60f9c75498b8",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to delete an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to delete an expense due to invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to delete!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "ef1d0a79-79da-46d7-b64f-a124474eb32d",
              "parentUUID": "02ba7d3d-d759-4ead-9b9d-dd1a992782e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d78c52b-ebfd-4a3a-ae2f-5266138c340d",
            "d0bcaf72-564e-4512-981e-10ab0de5892d",
            "5b87e5bd-ec10-4f9f-8a1f-5427a4d8eeb0",
            "7820837a-43a1-4664-97ec-198dae6dc908",
            "3c7999f5-772e-4f02-8059-60f9c75498b8",
            "ef1d0a79-79da-46d7-b64f-a124474eb32d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
          "title": "Testing Income related features",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\incomeTests.test.js",
          "file": "\\tests\\incomeTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"before each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(incomeFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "16b367f4-bcad-4b71-97f8-814749d73f06",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"after each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(incomeFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "98cb7624-5ae5-45d6-89f2-f24c24a6773a",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to add a new income successfully",
              "fullTitle": "Testing Income related features Able to add a new income successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        amount: 6969,\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].name).to.equal(req.body.name);\n    }\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "00632dd9-7216-4439-85dc-2d5ff28ea4dc",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to add a new income due to incomplete input",
              "fullTitle": "Testing Income related features Unable to add a new income due to incomplete input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected  \n    json: function (data) {\n        expect(data.message).to.not.equal(undefined);\n    },\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "6263fc28-e26f-4834-a0d3-6225e78eb9f1",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit an income successfully",
              "fullTitle": "Testing Income related features Able to edit an income successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income modified successfully!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "a29e45b9-6b54-4b54-8b13-14cf4bdd6e88",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to edit an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to edit an income due to an invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 6969 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to modify!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "a0364ab6-7570-48bf-b5cb-4d4ee358b635",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete an income successfully",
              "fullTitle": "Testing Income related features Able to delete an income successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income deleted successfully!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "7e35fade-4458-4d98-9344-3e5d58c9d33f",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to delete an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to delete an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 690696 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to delete!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "03cceceb-0cc7-4496-aef6-2a38d019fd50",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to view all transactions successfully",
              "fullTitle": "Testing Income related features Able to view all transactions successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(200);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.be.an('array');\n    }\n};\n// Call the \"viewTransactions\" function with the mocked request and response objects to test\nawait viewTransactions(req, res);",
              "err": {},
              "uuid": "9ccdb591-9664-4475-81db-611c824f77c0",
              "parentUUID": "e669c13a-4ebd-4aa8-9fd9-42d66ef82007",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00632dd9-7216-4439-85dc-2d5ff28ea4dc",
            "6263fc28-e26f-4834-a0d3-6225e78eb9f1",
            "a29e45b9-6b54-4b54-8b13-14cf4bdd6e88",
            "a0364ab6-7570-48bf-b5cb-4d4ee358b635",
            "7e35fade-4458-4d98-9344-3e5d58c9d33f",
            "03cceceb-0cc7-4496-aef6-2a38d019fd50",
            "9ccdb591-9664-4475-81db-611c824f77c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26429bfb-a765-4a43-961e-cfe33da62de5",
          "title": "Testing API Routes",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\routesTests.test.js",
          "file": "\\tests\\routesTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"before each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "ad9093cc-ad1d-4076-90ac-cb212d45bba0",
              "parentUUID": "26429bfb-a765-4a43-961e-cfe33da62de5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"after each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "f6939050-4f72-49d6-bdef-d4c588a4e637",
              "parentUUID": "26429bfb-a765-4a43-961e-cfe33da62de5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing API Routes Should register a new user successfully",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/register\")\n  .send({ email: \"james@gmail.com\", password: \"testpassword\" })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "9ce87b46-34a4-4046-bf36-23cf2b830d42",
              "parentUUID": "26429bfb-a765-4a43-961e-cfe33da62de5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should log in an existing user successfully",
              "fullTitle": "Testing API Routes Should log in an existing user successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/login\")\n  .send({ email: orgContent[0].email, password: orgContent[0].password })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body.message).to.equal(\"Login successful!\");\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "604df534-a9be-41e1-973e-685dd29e7df6",
              "parentUUID": "26429bfb-a765-4a43-961e-cfe33da62de5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ce87b46-34a4-4046-bf36-23cf2b830d42",
            "604df534-a9be-41e1-973e-685dd29e7df6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f17a1631-521b-4dee-a3aa-1bc5f71bb019",
          "title": "Testing Register Function",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"before each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "dee898e3-f241-4fad-881d-68caa7933b22",
              "parentUUID": "f17a1631-521b-4dee-a3aa-1bc5f71bb019",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"after each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "d3f315f1-ffee-4c86-ba09-82e932fc9fea",
              "parentUUID": "f17a1631-521b-4dee-a3aa-1bc5f71bb019",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing Register Function Should register a new user successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with user registration data\nconst req = {\n    body: {\n        email: \"mary@gmail.com\",\n        password: \"123456\",\n    },\n};\n// Mock response object with assertions for successful registration\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].email).to.equal(req.body.email);\n        expect(data[orgContent.length].password).to.equal(req.body.password);\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "039d63dc-c913-4454-be69-e233460ddfd2",
              "parentUUID": "f17a1631-521b-4dee-a3aa-1bc5f71bb019",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to email",
              "fullTitle": "Testing Register Function Should show validation error due to email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid email format\nconst req = {\n    body: {\n        email: \"simon#gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "87e2bfc5-c6f3-4cdc-9567-80eab50a21c5",
              "parentUUID": "f17a1631-521b-4dee-a3aa-1bc5f71bb019",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to password length",
              "fullTitle": "Testing Register Function Should show validation error due to password length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with a short password\nconst req = {\n    body: {\n        email: \"simon@gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "26bd65c0-5e12-444f-b60b-0011d4ca84a1",
              "parentUUID": "f17a1631-521b-4dee-a3aa-1bc5f71bb019",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "039d63dc-c913-4454-be69-e233460ddfd2",
            "87e2bfc5-c6f3-4cdc-9567-80eab50a21c5",
            "26bd65c0-5e12-444f-b60b-0011d4ca84a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82fd1c63-60fc-4f69-a6a6-1e54a7395dd3",
          "title": "Testing Login Function",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Login Function\"",
              "fullTitle": "Testing Login Function \"before each\" hook in \"Testing Login Function\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "05a9219e-fa0c-4d45-9804-b1c06de242df",
              "parentUUID": "82fd1c63-60fc-4f69-a6a6-1e54a7395dd3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should login successfully",
              "fullTitle": "Testing Login Function Should login successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with valid login credentials\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: orgContent[0].password,\n    },\n};\n// Mock response object with assertions for successful login\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Login successful!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "62d5c6f8-eb51-4cab-8428-67fd4cb34bb2",
              "parentUUID": "82fd1c63-60fc-4f69-a6a6-1e54a7395dd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show invalid credentials",
              "fullTitle": "Testing Login Function Should show invalid credentials",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid password\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: \"abcdefg\",\n    },\n};\n// Mock response object with assertions for invalid credentials\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Invalid credentials!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "b8aff246-506b-45b9-8578-4fd28766b83c",
              "parentUUID": "82fd1c63-60fc-4f69-a6a6-1e54a7395dd3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62d5c6f8-eb51-4cab-8428-67fd4cb34bb2",
            "b8aff246-506b-45b9-8578-4fd28766b83c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}