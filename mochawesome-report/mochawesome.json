{
  "stats": {
    "suites": 5,
    "tests": 20,
    "passes": 18,
    "pending": 0,
    "failures": 2,
    "start": "2024-01-31T19:16:53.882Z",
    "end": "2024-01-31T19:16:54.069Z",
    "duration": 187,
    "testsRegistered": 20,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b86e4027-a676-4fd5-8e38-4395f989fb97",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0322da3a-b12d-48cd-905b-39831d9a0688",
          "title": "Testing expense related features",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\expenseTests.test.js",
          "file": "\\tests\\expenseTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"before each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(expensesFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "c22126a9-e658-46ba-ab66-f0602a8dbaba",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"after each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(expensesFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "68aeddb2-ed8c-4144-82af-4c06e72ddf95",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should add a new expense successfully",
              "fullTitle": "Testing expense related features Should add a new expense successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response data is as expected\n  json: function (data) {\n    expect(data).to.have.lengthOf(orgContent.length + 1);\n    expect(data[orgContent.length].name).to.equal(req.body.name);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "ffe893ca-420f-4f21-bcce-6b99720c3a61",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to add an expense due to incomplete input",
              "fullTitle": "Testing expense related features Should not be able to add an expense due to incomplete input",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    date: \"2023-10-30\"\n  },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is present\n  json: function (data) {\n    expect(data.message).to.not.equal(undefined);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "3061fc88-9ea9-4b7a-94e7-fd9717820145",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should edit an expense successfully",
              "fullTitle": "Testing expense related features Should edit an expense successfully",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1700994740174044 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense modified successfully!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {
                "message": "AssertionError: expected 500 to equal 201",
                "estack": "AssertionError: expected 500 to equal 201\n    at Object.status (tests\\expenseTests.test.js:103:25)\n    at editExpense (utils\\ExpenseUtil.js:23:12)\n    at async Context.<anonymous> (tests\\expenseTests.test.js:113:5)",
                "diff": "- 500\n+ 201\n"
              },
              "uuid": "8bd319c5-a58c-47f4-8479-668aae041081",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to edit an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to edit an expense due to invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to modify!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "6475186a-e2d6-4d71-9014-7bdf0f1f6929",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete an expense successfully",
              "fullTitle": "Testing expense related features Should delete an expense successfully",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1700994740174044 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense deleted successfully!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {
                "message": "AssertionError: expected 500 to equal 201",
                "estack": "AssertionError: expected 500 to equal 201\n    at Object.status (tests\\expenseTests.test.js:155:25)\n    at deleteExpense (utils\\ExpenseUtil.js:35:12)\n    at async Context.<anonymous> (tests\\expenseTests.test.js:165:5)",
                "diff": "- 500\n+ 201\n"
              },
              "uuid": "b82e7d49-c008-4231-8625-06bf20794779",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to delete an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to delete an expense due to invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to delete!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "49b9a11d-18c8-48d4-8acb-4071694a1089",
              "parentUUID": "0322da3a-b12d-48cd-905b-39831d9a0688",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffe893ca-420f-4f21-bcce-6b99720c3a61",
            "3061fc88-9ea9-4b7a-94e7-fd9717820145",
            "6475186a-e2d6-4d71-9014-7bdf0f1f6929",
            "49b9a11d-18c8-48d4-8acb-4071694a1089"
          ],
          "failures": [
            "8bd319c5-a58c-47f4-8479-668aae041081",
            "b82e7d49-c008-4231-8625-06bf20794779"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
          "title": "Testing Income related features",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\incomeTests.test.js",
          "file": "\\tests\\incomeTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"before each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(incomeFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "1c0d160a-e9d7-4b8a-8182-e3e6a3dae502",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"after each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(incomeFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "e50ee718-1f0c-498d-a3a6-db2d7ca486fd",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to add a new income successfully",
              "fullTitle": "Testing Income related features Able to add a new income successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        amount: 6969,\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].name).to.equal(req.body.name);\n    }\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "41963c8b-9ecc-407b-bffa-eab599686504",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to add a new income due to incomplete input",
              "fullTitle": "Testing Income related features Unable to add a new income due to incomplete input",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected  \n    json: function (data) {\n        expect(data.message).to.not.equal(undefined);\n    },\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "8bca6112-8c2b-424f-b800-c40ba77895fe",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit an income successfully",
              "fullTitle": "Testing Income related features Able to edit an income successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income modified successfully!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "40d0cba0-3965-4a2e-8261-bd2899740f79",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to edit an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to edit an income due to an invalid ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 6969 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to modify!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "bd4890e1-7912-45f5-a74f-93e4ddd8f0e0",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete an income successfully",
              "fullTitle": "Testing Income related features Able to delete an income successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income deleted successfully!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "b6bf6cf3-e9ef-47c6-8465-8a10f24abdb9",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to delete an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to delete an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 690696 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to delete!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "3651a148-ec54-41e8-ab9e-fb6f8affd2ef",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to view all transactions successfully",
              "fullTitle": "Testing Income related features Able to view all transactions successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(200);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.be.an('array');\n    }\n};\n// Call the \"viewTransactions\" function with the mocked request and response objects to test\nawait viewTransactions(req, res);",
              "err": {},
              "uuid": "8bb553e4-98d1-401d-b5af-0d6b9e186106",
              "parentUUID": "b2b04eda-4ca1-4308-b0a1-1d59f2baa97e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41963c8b-9ecc-407b-bffa-eab599686504",
            "8bca6112-8c2b-424f-b800-c40ba77895fe",
            "40d0cba0-3965-4a2e-8261-bd2899740f79",
            "bd4890e1-7912-45f5-a74f-93e4ddd8f0e0",
            "b6bf6cf3-e9ef-47c6-8465-8a10f24abdb9",
            "3651a148-ec54-41e8-ab9e-fb6f8affd2ef",
            "8bb553e4-98d1-401d-b5af-0d6b9e186106"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5e3f71b-5b06-42ff-8390-af403357fb0a",
          "title": "Testing API Routes",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\routesTests.test.js",
          "file": "\\tests\\routesTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"before each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "4adb111d-baec-4b0a-af5e-f637dc13abb6",
              "parentUUID": "d5e3f71b-5b06-42ff-8390-af403357fb0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"after each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "90c67136-86d3-49d1-9209-3b9a86aac745",
              "parentUUID": "d5e3f71b-5b06-42ff-8390-af403357fb0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing API Routes Should register a new user successfully",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/register\")\n  .send({ email: \"james@gmail.com\", password: \"testpassword\" })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "e0b30f81-2c17-4d75-80b5-657b368a104d",
              "parentUUID": "d5e3f71b-5b06-42ff-8390-af403357fb0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should log in an existing user successfully",
              "fullTitle": "Testing API Routes Should log in an existing user successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/login\")\n  .send({ email: orgContent[0].email, password: orgContent[0].password })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body.message).to.equal(\"Login successful!\");\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "716e60db-3b3a-4a76-86e2-a9cf81f071c1",
              "parentUUID": "d5e3f71b-5b06-42ff-8390-af403357fb0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0b30f81-2c17-4d75-80b5-657b368a104d",
            "716e60db-3b3a-4a76-86e2-a9cf81f071c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4e44de9-4aeb-42b7-a746-6c9d5209c3a7",
          "title": "Testing Register Function",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"before each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "d2af087a-b9e3-4c37-83e1-d187b68f6ed3",
              "parentUUID": "a4e44de9-4aeb-42b7-a746-6c9d5209c3a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"after each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "7a22f861-eaad-472a-9f95-1fce3bbbb785",
              "parentUUID": "a4e44de9-4aeb-42b7-a746-6c9d5209c3a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing Register Function Should register a new user successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with user registration data\nconst req = {\n    body: {\n        email: \"mary@gmail.com\",\n        password: \"123456\",\n    },\n};\n// Mock response object with assertions for successful registration\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].email).to.equal(req.body.email);\n        expect(data[orgContent.length].password).to.equal(req.body.password);\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "4acdfdd6-d47e-4094-bf8b-b633e15a7151",
              "parentUUID": "a4e44de9-4aeb-42b7-a746-6c9d5209c3a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to email",
              "fullTitle": "Testing Register Function Should show validation error due to email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid email format\nconst req = {\n    body: {\n        email: \"simon#gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "f2de358b-26fa-4760-918b-0c703d0838ac",
              "parentUUID": "a4e44de9-4aeb-42b7-a746-6c9d5209c3a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to password length",
              "fullTitle": "Testing Register Function Should show validation error due to password length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with a short password\nconst req = {\n    body: {\n        email: \"simon@gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "e34bf90e-09f4-4d1e-992b-23a473364066",
              "parentUUID": "a4e44de9-4aeb-42b7-a746-6c9d5209c3a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4acdfdd6-d47e-4094-bf8b-b633e15a7151",
            "f2de358b-26fa-4760-918b-0c703d0838ac",
            "e34bf90e-09f4-4d1e-992b-23a473364066"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "103a81a0-7e06-425e-8acb-a06ff48c67df",
          "title": "Testing Login Function",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Login Function\"",
              "fullTitle": "Testing Login Function \"before each\" hook in \"Testing Login Function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "79ebee38-19db-40b8-8fb4-ed64c0b82a64",
              "parentUUID": "103a81a0-7e06-425e-8acb-a06ff48c67df",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should login successfully",
              "fullTitle": "Testing Login Function Should login successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with valid login credentials\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: orgContent[0].password,\n    },\n};\n// Mock response object with assertions for successful login\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Login successful!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "7081c424-24f1-4790-9e6f-5a5378bbb36f",
              "parentUUID": "103a81a0-7e06-425e-8acb-a06ff48c67df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show invalid credentials",
              "fullTitle": "Testing Login Function Should show invalid credentials",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid password\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: \"abcdefg\",\n    },\n};\n// Mock response object with assertions for invalid credentials\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Invalid credentials!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "2fbdc601-d872-408f-86e5-c5085c11bb55",
              "parentUUID": "103a81a0-7e06-425e-8acb-a06ff48c67df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7081c424-24f1-4790-9e6f-5a5378bbb36f",
            "2fbdc601-d872-408f-86e5-c5085c11bb55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}