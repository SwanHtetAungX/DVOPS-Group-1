{
  "stats": {
    "suites": 5,
    "tests": 20,
    "passes": 18,
    "pending": 0,
    "failures": 2,
    "start": "2024-01-31T19:52:55.464Z",
    "end": "2024-01-31T19:52:55.533Z",
    "duration": 69,
    "testsRegistered": 20,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "68c7479b-887f-47c5-90b3-e0986a63748a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
          "title": "Testing expense related features",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\expenseTests.test.js",
          "file": "\\tests\\expenseTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"before each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(expensesFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "beab01a2-7674-433b-aacc-69ba591a6742",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing expense related features\"",
              "fullTitle": "Testing expense related features \"after each\" hook in \"Testing expense related features\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(expensesFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "a87bb6ea-2c0b-4bb8-861e-2b98006b8e06",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should add a new expense successfully",
              "fullTitle": "Testing expense related features Should add a new expense successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response data is as expected\n  json: function (data) {\n    expect(data).to.have.lengthOf(orgContent.length + 1);\n    expect(data[orgContent.length].name).to.equal(req.body.name);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "a67bf9eb-4985-44ea-946a-df2c739319b0",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to add an expense due to incomplete input",
              "fullTitle": "Testing expense related features Should not be able to add an expense due to incomplete input",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    date: \"2023-10-30\"\n  },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is present\n  json: function (data) {\n    expect(data.message).to.not.equal(undefined);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "fb10d0e1-4ecc-42b1-a418-3c8f6b0ef2a3",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should edit an expense successfully",
              "fullTitle": "Testing expense related features Should edit an expense successfully",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1700994740174044 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense modified successfully!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {
                "message": "AssertionError: expected 500 to equal 201",
                "estack": "AssertionError: expected 500 to equal 201\n    at Object.status (tests\\expenseTests.test.js:103:25)\n    at editExpense (utils\\ExpenseUtil.js:23:12)\n    at async Context.<anonymous> (tests\\expenseTests.test.js:113:5)",
                "diff": "- 500\n+ 201\n"
              },
              "uuid": "d99aa53b-cce4-4816-b16d-305c7f5704f7",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to edit an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to edit an expense due to invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to modify!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "0f444ed8-5bd4-4f4d-becd-dc3cd363225c",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete an expense successfully",
              "fullTitle": "Testing expense related features Should delete an expense successfully",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1700994740174044 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense deleted successfully!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {
                "message": "AssertionError: expected 500 to equal 201",
                "estack": "AssertionError: expected 500 to equal 201\n    at Object.status (tests\\expenseTests.test.js:155:25)\n    at deleteExpense (utils\\ExpenseUtil.js:35:12)\n    at async Context.<anonymous> (tests\\expenseTests.test.js:165:5)",
                "diff": "- 500\n+ 201\n"
              },
              "uuid": "899df233-68a7-4f4a-ad03-d069b0782953",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not be able to delete an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to delete an expense due to invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to delete!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "8e694fb0-df72-4d29-a88c-1d01849441c0",
              "parentUUID": "40211a81-9fdf-478d-8eeb-99ffbf1b7660",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a67bf9eb-4985-44ea-946a-df2c739319b0",
            "fb10d0e1-4ecc-42b1-a418-3c8f6b0ef2a3",
            "0f444ed8-5bd4-4f4d-becd-dc3cd363225c",
            "8e694fb0-df72-4d29-a88c-1d01849441c0"
          ],
          "failures": [
            "d99aa53b-cce4-4816-b16d-305c7f5704f7",
            "899df233-68a7-4f4a-ad03-d069b0782953"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
          "title": "Testing Income related features",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\incomeTests.test.js",
          "file": "\\tests\\incomeTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"before each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(incomeFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "6058bebb-473d-4901-a27c-d4de475b794b",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Income related features\"",
              "fullTitle": "Testing Income related features \"after each\" hook in \"Testing Income related features\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(incomeFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "41cd0de1-bb93-4a50-86c0-d3d70e5d5afa",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to add a new income successfully",
              "fullTitle": "Testing Income related features Able to add a new income successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        amount: 6969,\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].name).to.equal(req.body.name);\n    }\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "5537e2f8-6160-434e-a3dd-7d4a1817aa21",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to add a new income due to incomplete input",
              "fullTitle": "Testing Income related features Unable to add a new income due to incomplete input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected  \n    json: function (data) {\n        expect(data.message).to.not.equal(undefined);\n    },\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "69f070c2-d551-43c0-9fdb-300ec4df3cb7",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to edit an income successfully",
              "fullTitle": "Testing Income related features Able to edit an income successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income modified successfully!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "16ad9e99-b456-466e-9ad9-d42f11823162",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to edit an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to edit an income due to an invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 6969 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to modify!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "793fa194-c4f1-4dba-be6c-985d476d9ecf",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to delete an income successfully",
              "fullTitle": "Testing Income related features Able to delete an income successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income deleted successfully!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "ff4d932e-3afc-4b15-a1c2-4fc93da8849a",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Unable to delete an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to delete an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 690696 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to delete!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "0bd1b677-a473-4ee4-a662-cf10d1dc4fc8",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to view all transactions successfully",
              "fullTitle": "Testing Income related features Able to view all transactions successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(200);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.be.an('array');\n    }\n};\n// Call the \"viewTransactions\" function with the mocked request and response objects to test\nawait viewTransactions(req, res);",
              "err": {},
              "uuid": "09812f46-224a-4b9f-8cb6-8c4acded7521",
              "parentUUID": "e8a870d9-0578-40a7-82aa-0c4f6f8d615e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5537e2f8-6160-434e-a3dd-7d4a1817aa21",
            "69f070c2-d551-43c0-9fdb-300ec4df3cb7",
            "16ad9e99-b456-466e-9ad9-d42f11823162",
            "793fa194-c4f1-4dba-be6c-985d476d9ecf",
            "ff4d932e-3afc-4b15-a1c2-4fc93da8849a",
            "0bd1b677-a473-4ee4-a662-cf10d1dc4fc8",
            "09812f46-224a-4b9f-8cb6-8c4acded7521"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3720b491-83b2-4551-8b55-f7e3f97b981a",
          "title": "Testing API Routes",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\routesTests.test.js",
          "file": "\\tests\\routesTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"before each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "370b46d9-fc5e-4249-ad04-891f5d2e1cf3",
              "parentUUID": "3720b491-83b2-4551-8b55-f7e3f97b981a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing API Routes\"",
              "fullTitle": "Testing API Routes \"after each\" hook in \"Testing API Routes\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "9661602f-9ead-4658-b44e-2977eb04d55e",
              "parentUUID": "3720b491-83b2-4551-8b55-f7e3f97b981a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing API Routes Should register a new user successfully",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/register\")\n  .send({ email: \"james@gmail.com\", password: \"testpassword\" })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "165957c9-7604-4cdb-bd33-a8cd7a392ae5",
              "parentUUID": "3720b491-83b2-4551-8b55-f7e3f97b981a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should log in an existing user successfully",
              "fullTitle": "Testing API Routes Should log in an existing user successfully",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/login\")\n  .send({ email: orgContent[0].email, password: orgContent[0].password })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body.message).to.equal(\"Login successful!\");\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "a09e79b5-52a2-4032-bd0b-b176ff9d1611",
              "parentUUID": "3720b491-83b2-4551-8b55-f7e3f97b981a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "165957c9-7604-4cdb-bd33-a8cd7a392ae5",
            "a09e79b5-52a2-4032-bd0b-b176ff9d1611"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b20a99bb-8b62-4d9a-b587-1d5a82458614",
          "title": "Testing Register Function",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"before each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "dd7ff384-10d4-45dc-ae1b-afa552e0cc42",
              "parentUUID": "b20a99bb-8b62-4d9a-b587-1d5a82458614",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing Register Function\"",
              "fullTitle": "Testing Register Function \"after each\" hook in \"Testing Register Function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "f2a1de88-f442-4117-9dad-d03ad9446d45",
              "parentUUID": "b20a99bb-8b62-4d9a-b587-1d5a82458614",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing Register Function Should register a new user successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with user registration data\nconst req = {\n    body: {\n        email: \"mary@gmail.com\",\n        password: \"123456\",\n    },\n};\n// Mock response object with assertions for successful registration\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].email).to.equal(req.body.email);\n        expect(data[orgContent.length].password).to.equal(req.body.password);\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "42c49cc7-6719-4e79-b7e5-99db9f7f5464",
              "parentUUID": "b20a99bb-8b62-4d9a-b587-1d5a82458614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to email",
              "fullTitle": "Testing Register Function Should show validation error due to email",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid email format\nconst req = {\n    body: {\n        email: \"simon#gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "72391f44-8bad-4ddd-961b-d8eb1cbf2739",
              "parentUUID": "b20a99bb-8b62-4d9a-b587-1d5a82458614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show validation error due to password length",
              "fullTitle": "Testing Register Function Should show validation error due to password length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with a short password\nconst req = {\n    body: {\n        email: \"simon@gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "122d1c99-3976-449e-a26d-3a93a2aef738",
              "parentUUID": "b20a99bb-8b62-4d9a-b587-1d5a82458614",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42c49cc7-6719-4e79-b7e5-99db9f7f5464",
            "72391f44-8bad-4ddd-961b-d8eb1cbf2739",
            "122d1c99-3976-449e-a26d-3a93a2aef738"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1716e146-5838-474d-9bca-12f8ac8bb6e4",
          "title": "Testing Login Function",
          "fullFile": "C:\\Users\\Chun Kang So\\Desktop\\Y2S2 Projects\\DVOPS\\DVOPS-Group-1\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing Login Function\"",
              "fullTitle": "Testing Login Function \"before each\" hook in \"Testing Login Function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "7e163979-a9ef-4b8c-81b9-1eabf1de5cda",
              "parentUUID": "1716e146-5838-474d-9bca-12f8ac8bb6e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should login successfully",
              "fullTitle": "Testing Login Function Should login successfully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with valid login credentials\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: orgContent[0].password,\n    },\n};\n// Mock response object with assertions for successful login\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Login successful!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "c2c8f76f-e715-45d1-aca7-384196072c58",
              "parentUUID": "1716e146-5838-474d-9bca-12f8ac8bb6e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should show invalid credentials",
              "fullTitle": "Testing Login Function Should show invalid credentials",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid password\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: \"abcdefg\",\n    },\n};\n// Mock response object with assertions for invalid credentials\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Invalid credentials!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "59ccd854-5c5d-44ac-bdba-f8cbca093ab2",
              "parentUUID": "1716e146-5838-474d-9bca-12f8ac8bb6e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2c8f76f-e715-45d1-aca7-384196072c58",
            "59ccd854-5c5d-44ac-bdba-f8cbca093ab2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}