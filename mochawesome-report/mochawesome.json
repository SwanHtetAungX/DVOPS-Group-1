{
  "stats": {
    "suites": 0,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-31T19:20:14.717Z",
    "end": "2024-01-31T19:20:14.719Z",
    "duration": 2,
    "testsRegistered": 20,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 20,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "33d02426-21b4-45e4-ae2d-12a6d96fe336",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "135fd253-3daa-4824-96fe-7213496dcef2",
          "title": "Testing expense related features",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\expenseTests.test.js",
          "file": "\\tests\\expenseTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Testing expense related features \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(expensesFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "b4c408c1-93db-4793-9890-18c9487f9088",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Testing expense related features \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(expensesFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "f7de2162-4932-4cce-83ea-ac07c506f9af",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should add a new expense successfully",
              "fullTitle": "Testing expense related features Should add a new expense successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response data is as expected\n  json: function (data) {\n    expect(data).to.have.lengthOf(orgContent.length + 1);\n    expect(data[orgContent.length].name).to.equal(req.body.name);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "5748cf36-e07f-48a9-8def-737a7eb08e05",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should not be able to add an expense due to incomplete input",
              "fullTitle": "Testing expense related features Should not be able to add an expense due to incomplete input",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    date: \"2023-10-30\"\n  },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is present\n  json: function (data) {\n    expect(data.message).to.not.equal(undefined);\n  },\n};\n// Calling the 'addExpense' function with the mocked request and response objects\nawait addExpense(req, res);",
              "err": {},
              "uuid": "6e109d24-bc4b-49a4-931a-094d29bd5b71",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should edit an expense successfully",
              "fullTitle": "Testing expense related features Should edit an expense successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1700994740174044 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense modified successfully!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "ed010e40-0674-4530-8dd8-044024fcc113",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should not be able to edit an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to edit an expense due to invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n  body: {\n    name: \"Groceries\",\n    description: \"Weekly grocery shopping\",\n    amount: 40,\n    category: \"Food\",\n    username: \"john_doe\",\n    date: \"2023-10-30\"\n  }\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to modify!');\n  },\n};\n// Calling the 'editExpense' function with the mocked request and response objects\nawait editExpense(req, res);",
              "err": {},
              "uuid": "18ab5458-2192-4034-9170-16f308283d56",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should delete an expense successfully",
              "fullTitle": "Testing expense related features Should delete an expense successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1700994740174044 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(201);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Expense deleted successfully!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "c7b28ec7-7004-456b-a77c-096695f14402",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should not be able to delete an expense due to invalid ID",
              "fullTitle": "Testing expense related features Should not be able to delete an expense due to invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n  params: { id: 1000 },\n};\nconst res = {\n  // Mocking the 'status' method to check if the correct status code is set\n  status: function (code) {\n    expect(code).to.equal(500);\n    return this;\n  },\n  // Mocking the 'json' method to check if the response message is as expected\n  json: function (data) {\n    expect(data.message).to.equal('Error occurred, unable to delete!');\n  },\n};\n// Calling the 'deleteExpense' function with the mocked request and response objects\nawait deleteExpense(req, res);",
              "err": {},
              "uuid": "d65b3663-a30e-4f7f-9e91-677fe6d83539",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5748cf36-e07f-48a9-8def-737a7eb08e05",
            "6e109d24-bc4b-49a4-931a-094d29bd5b71",
            "ed010e40-0674-4530-8dd8-044024fcc113",
            "18ab5458-2192-4034-9170-16f308283d56",
            "c7b28ec7-7004-456b-a77c-096695f14402",
            "d65b3663-a30e-4f7f-9e91-677fe6d83539"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "98c4ca90-9ff6-403b-ada1-9e01d801f2f5",
          "title": "Testing Income related features",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\incomeTests.test.js",
          "file": "\\tests\\incomeTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Testing Income related features \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(incomeFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "c424dc55-7f49-400b-aa21-5f485b99c11b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Testing Income related features \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(incomeFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "b945ab17-4485-4546-b82d-bee4bc54e97f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Able to add a new income successfully",
              "fullTitle": "Testing Income related features Able to add a new income successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        amount: 6969,\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].name).to.equal(req.body.name);\n    }\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "6aa88600-af13-4f28-be7b-1676296a579f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Unable to add a new income due to incomplete input",
              "fullTitle": "Testing Income related features Unable to add a new income due to incomplete input",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    body: {\n        name: \"Test Income\",\n        description: \"Correct inputs for testing\",\n        source: \"testing\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected  \n    json: function (data) {\n        expect(data.message).to.not.equal(undefined);\n    },\n};\n// Call the \"addIncome\" function with the mocked request and response objects to test\nawait addIncome(req, res);",
              "err": {},
              "uuid": "f0e2c041-9ef0-4d69-bbfd-551a16e98ff0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Able to edit an income successfully",
              "fullTitle": "Testing Income related features Able to edit an income successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income modified successfully!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "177b492b-608b-4495-9339-71b866795fd8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Unable to edit an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to edit an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 6969 },\n    body: {\n        name: \"Test edits\",\n        description: \"Editted this through testing case\",\n        amount: 1,\n        source: \"Test Edits\",\n        username: \"chunkang\",\n        date: \"26-11-2023\",\n    }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to modify!');\n    },\n};\n// Call the \"editIncome\" function with the mocked request and response objects to test\nawait editIncome(req, res);",
              "err": {},
              "uuid": "657923fb-1a44-4756-aa29-1403e4788441",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Able to delete an income successfully",
              "fullTitle": "Testing Income related features Able to delete an income successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 1706728421915975 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Income deleted successfully!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "14c4b649-eed2-4e63-95e4-f74137684f06",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Unable to delete an income due to an invalid ID",
              "fullTitle": "Testing Income related features Unable to delete an income due to an invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {\n    params: { id: 690696 }\n};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to delete!');\n    },\n};\n// Call the \"deleteIncome\" function with the mocked request and response objects to test\nawait deleteIncome(req, res);",
              "err": {},
              "uuid": "83968552-e13b-40ed-add4-9bc8c06fc11b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Able to view all transactions successfully",
              "fullTitle": "Testing Income related features Able to view all transactions successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = {};\nconst res = {\n    // Mocking the 'status' method to check if the correct status code is set\n    status: function (code) {\n        expect(code).to.equal(200);\n        return this;\n    },\n    // Mocking the 'json' method to check if the response data is as expected    \n    json: function (data) {\n        expect(data).to.be.an('array');\n    }\n};\n// Call the \"viewTransactions\" function with the mocked request and response objects to test\nawait viewTransactions(req, res);",
              "err": {},
              "uuid": "e449dcd4-afcf-4c5a-8416-1bd689723c4a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6aa88600-af13-4f28-be7b-1676296a579f",
            "f0e2c041-9ef0-4d69-bbfd-551a16e98ff0",
            "177b492b-608b-4495-9339-71b866795fd8",
            "657923fb-1a44-4756-aa29-1403e4788441",
            "14c4b649-eed2-4e63-95e4-f74137684f06",
            "83968552-e13b-40ed-add4-9bc8c06fc11b",
            "e449dcd4-afcf-4c5a-8416-1bd689723c4a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c74c1346-27dd-4294-9553-7ab6f3bc43f1",
          "title": "Testing API Routes",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\routesTests.test.js",
          "file": "\\tests\\routesTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Testing API Routes \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "76a020a6-4c20-4138-bbc0-7cd4abf3a245",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Testing API Routes \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "82c16f24-074a-4776-9e95-1ed5e2bf7bcd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing API Routes Should register a new user successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/register\")\n  .send({ email: \"james@gmail.com\", password: \"testpassword\" })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "e1f05242-073d-4374-99da-f075c4906cf4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should log in an existing user successfully",
              "fullTitle": "Testing API Routes Should log in an existing user successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(\"/login\")\n  .send({ email: orgContent[0].email, password: orgContent[0].password })\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(201);\n    expect(res.body.message).to.equal(\"Login successful!\");\n    done();\n    server.close();\n  });",
              "err": {},
              "uuid": "3d5ca57e-c602-4e18-95c7-b173e4be2053",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e1f05242-073d-4374-99da-f075c4906cf4",
            "3d5ca57e-c602-4e18-95c7-b173e4be2053"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c4b91902-eef6-4c54-9052-699a5ccb8a32",
          "title": "Testing Register Function",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Testing Register Function \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "7737ba63-a1c1-402f-bfed-c806fa6e77c4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Testing Register Function \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await fs.writeFile(usersFilePath, JSON.stringify(orgContent), \"utf8\");",
              "err": {},
              "uuid": "ab7e3e3d-e685-43ee-8173-228a9c2114da",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should register a new user successfully",
              "fullTitle": "Testing Register Function Should register a new user successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with user registration data\nconst req = {\n    body: {\n        email: \"mary@gmail.com\",\n        password: \"123456\",\n    },\n};\n// Mock response object with assertions for successful registration\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data).to.have.lengthOf(orgContent.length + 1);\n        expect(data[orgContent.length].email).to.equal(req.body.email);\n        expect(data[orgContent.length].password).to.equal(req.body.password);\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "5ade2e18-f0f2-4c87-97e7-c4624f83075e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should show validation error due to email",
              "fullTitle": "Testing Register Function Should show validation error due to email",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid email format\nconst req = {\n    body: {\n        email: \"simon#gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "28349ebd-67ac-420d-8eac-10e4c4c7a8da",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should show validation error due to password length",
              "fullTitle": "Testing Register Function Should show validation error due to password length",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with a short password\nconst req = {\n    body: {\n        email: \"simon@gmail.com\",\n        password: \"123\",\n    },\n};\n// Mock response object with assertions for validation error\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Validation error\");\n    },\n};\n// Call the register function with the mock request and response\nawait register(req, res);",
              "err": {},
              "uuid": "6003d7d9-f3a9-440b-97e6-0ad820a9cd46",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5ade2e18-f0f2-4c87-97e7-c4624f83075e",
            "28349ebd-67ac-420d-8eac-10e4c4c7a8da",
            "6003d7d9-f3a9-440b-97e6-0ad820a9cd46"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aed550c5-35f9-420e-a72e-8be9d65e591b",
          "title": "Testing Login Function",
          "fullFile": "C:\\Users\\Chun Kang\\Desktop\\DVOPS_Project\\tests\\userTests.test.js",
          "file": "\\tests\\userTests.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Testing Login Function \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "orgContent = await fs.readFile(usersFilePath, \"utf8\");\norgContent = JSON.parse(orgContent);",
              "err": {},
              "uuid": "84d6c284-0cc9-4b31-9209-aba2bdd9909a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should login successfully",
              "fullTitle": "Testing Login Function Should login successfully",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with valid login credentials\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: orgContent[0].password,\n    },\n};\n// Mock response object with assertions for successful login\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Login successful!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "bde43a32-9191-4176-84f7-fd4463629693",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should show invalid credentials",
              "fullTitle": "Testing Login Function Should show invalid credentials",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request object with invalid password\nconst req = {\n    body: {\n        email: orgContent[0].email,\n        password: \"abcdefg\",\n    },\n};\n// Mock response object with assertions for invalid credentials\nconst res = {\n    status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n    },\n    json: function (data) {\n        expect(data.message).to.equal(\"Invalid credentials!\");\n    },\n};\n// Call the login function with the mock request and response\nawait login(req, res);",
              "err": {},
              "uuid": "252524c8-5b11-4f65-b337-d16700429c5c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "bde43a32-9191-4176-84f7-fd4463629693",
            "252524c8-5b11-4f65-b337-d16700429c5c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}